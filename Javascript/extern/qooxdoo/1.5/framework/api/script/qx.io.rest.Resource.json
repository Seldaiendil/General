{"attributes": {"fullName": "qx.io.rest.Resource", "packageName": "qx.io.rest", "type": "class", "name": "Resource", "superClass": "qx.core.Object"}, "type": "class", "children": [{"attributes": {"text": "<p><span class=\"caps\">EXPERIMENTAL</span> &#8211; <span class=\"caps\">NOT</span> <span class=\"caps\">READY</span> <span class=\"caps\">FOR</span> <span class=\"caps\">PRODUCTION</span></p>\n\n<p>Client-side wrapper of a <span class=\"caps\">REST</span> resource.</p>\n\n<p>Each instance represents a resource in terms of <span class=\"caps\">REST</span>. A number of actions\nunique to the resource can be defined and invoked. A resource with its\nactions is configured declaratively by passing a resource description to\nthe constructor, or programatically using {@link #map}.</p>\n\n<p>Each action is associated to a route. A route is a combination of method,\n<span class=\"caps\">URL</span> pattern and optional parameter constraints.</p>\n\n<p>An action is invoked by calling a method with the same name. When a <span class=\"caps\">URL</span>\npattern of a route contains positional parameters, those parameters must be\npassed when invoking the associated action. Also, constraints defined in the\nroute must be satisfied.</p>\n\n<p>When an action is invoked, a request is configured according to the associated\nroute, is passed the parameters and finally send. What kind of request is send\ncan be configured by overwriting {@link #_getRequest}.</p>\n\n<p>In order to respond to successful (or erroneous) invocations of actions,\neither listen to the generic &#8220;success&#8221; or &#8220;error&#8221; event and get the action\nfrom the event data, or listen to action specific events defined at runtime.\nAction specific events follow the pattern &#8221;Success&#8221; and\n&#8221;Error&#8221;, e.g. &#8220;indexSuccess&#8221;.</p>"}, "type": "desc"}, {"attributes": {}, "type": "constructor", "children": [{"attributes": {"overriddenFrom": "qx.core.Object", "isCtor": true, "name": "ctor"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"defaultValue": "", "name": "description"}, "type": "param", "children": [{"attributes": {"text": "<p>Each key of the map is interpreted as\n <code>action</code> name. The value associated to the key must be a map\n with the properties <code>method</code> and <code>url</code>.\n <code>check</code> is optional. Also see {@link #map}.</p>\n\n<p>For example:</p>\n\n<pre lang=\"javascript\">\n{ show: {method: \"GET\", url: \"/photos/:id\", check: /\\d+/} }\n</pre>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}]}]}, {"attributes": {}, "type": "events", "children": [{"attributes": {"name": "error"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when request associated to action fails.</p>\n\n<p>Additionally, action specific events are fired that follow the pattern\n&#8221;Error&#8221;, e.g. &#8220;indexError&#8221;.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Rest"}, "type": "entry"}]}]}, {"attributes": {"name": "success"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired when request associated to action was successful.</p>\n\n<p>Additionally, action specific events are fired that follow the pattern\n&#8221;Success&#8221;, e.g. &#8220;indexSuccess&#8221;.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.type.Rest"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"type": "Number", "name": "POLL_THROTTLE_COUNT", "value": "30"}, "type": "constant", "children": [{"attributes": {"text": "<p>Number of immediate responses accepted before throttling takes place.</p>"}, "type": "desc"}]}, {"attributes": {"type": "Number", "name": "POLL_THROTTLE_LIMIT", "value": "100"}, "type": "constant", "children": [{"attributes": {"text": "<p>Number of milliseconds below a request is considered immediate and\nsubject to throttling checks.</p>"}, "type": "desc"}]}]}, {"attributes": {}, "type": "methods", "children": [{"attributes": {"access": "private", "name": "__createRequest"}, "type": "method", "children": [{"attributes": {"text": "<p>Create request.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "name": "__declareEvent"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Type of event.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Declare event at runtime.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "name": "__mapFromDescription"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "description"}, "type": "param", "children": [{"attributes": {"text": "<p>Map that defines the routes.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Map actions from description.</p>\n\n<p>Allows to decoratively define routes.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "name": "__placeholdersFromUrl"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "url"}, "type": "param", "children": [{"attributes": {"text": "<p>The <span class=\"caps\">URL</span> to parse for placeholders.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get placeholders from <span class=\"caps\">URL</span>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Array of placeholders without the placeholder prefix.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_getRequest"}, "type": "method", "children": [{"attributes": {"text": "<p>Get request.</p>\n\n<p>May be overriden to change type of request.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "name": "_getRequestConfig"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action associated to request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "params"}, "type": "param", "children": [{"attributes": {"text": "<p>Parameters to embed in request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get request configuration for action and parameters.</p>\n\n<p>This is were placeholders are replaced with parameters.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Map of configuration settings. Has the properties\n  <code>method</code>, <code>url</code> and <code>check</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_getThrottleCount"}, "type": "method", "children": [{"attributes": {"text": "<p>Override to adjust the throttle count.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "name": "_getThrottleLimit"}, "type": "method", "children": [{"attributes": {"text": "<p>Override to adjust the throttle limit.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "name": "_invoke"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to invoke.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "params"}, "type": "param", "children": [{"attributes": {"text": "<p>Map of parameters to be send as part of the request,\n where the key is the parameter to match and the value a string. Inserted\n into <span class=\"caps\">URL</span> when a matching positional parameter is found.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Invoke action with parameters.</p>\n\n<p>Internally called by actions dynamically created.</p>\n\n<p>May be overriden to customize action and parameter handling.</p>"}, "type": "desc"}]}, {"attributes": {"name": "configureRequest"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "callback"}, "type": "param", "children": [{"attributes": {"text": "<p>Function called before request is send.\n  Receives pre-configured request and action.</p>\n\n<pre class=\"javascript\">\nreq.setConfigureRequest(function(req, action) {\n  if (action === \"index\") {\n    req.setAccept(\"application/json\");\n  }\n});\n</pre>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Configure request.</p>"}, "type": "desc"}]}, {"attributes": {"name": "longPoll"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to poll.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Long-poll action.</p>\n\n<p>Use Ajax long-polling to continously fetch a resource as soon as the\nserver signals new data. The server determines when new data is available,\nwhile the client keeps open a request. Requires configuration on the\nserver side. Basically, the server must not close a connection until\nnew data is available. For a high level introduction to long-polling,\nrefer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\nAjax with long polling</a>.</p>\n\n<p>Uses {@link #refresh} internally. Make sure you understand the\nimplications of IE&#8217;s tendency to cache overly agressive.</p>\n\n<p>Note no interval is given on the client side.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Id of handler responsible for long-polling. To stop\n polling, remove handler using {@link qx.core.Object#removeListenerById}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"name": "map"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to associate to request.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "method"}, "type": "param", "children": [{"attributes": {"text": "<p>Method to configure request with.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "url"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">URL</span> to configure request with. May contain positional\n  parameters (:param) that are replaced by values given when the action\n  is invoked.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "", "name": "check"}, "type": "param", "children": [{"attributes": {"text": "<p>Map defining parameter constraints, where the key is\n  the parameter and the value a regular expression.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Map action to combination of method and <span class=\"caps\">URL</span> pattern.</p>\n\n<pre class=\"javascript\">\n  res.map(\"show\", \"GET\", \"/photos/:id\", {id: /\\d+/});\n\n  // GET /photos/123\n  res.show({id: \"123\"});\n</pre>"}, "type": "desc"}]}, {"attributes": {"name": "poll"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to poll.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "interval"}, "type": "param", "children": [{"attributes": {"text": "<p>Interval in ms.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Number"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "", "name": "params"}, "type": "param", "children": [{"attributes": {"text": "<p>Map of parameters. See {@link #_invoke}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Periodically invoke action.</p>\n\n<p>Replays parameters given when action was invoked originally. When the\naction was not yet invoked and requires parameters, parameters must be\ngiven.</p>\n\n<p>Please note that IE tends to cache overly agressive. One work-around is\nto disable caching on the client side by configuring the request with\n<code>setCache(false)</code>. If you control the server, a better\nwork-around is to include appropriate headers to explicitly control\ncaching. This way you still avoid requests that can be correctly answered\nfrom cache (e.g. when nothing has changed since the last poll). Please\nrefer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\nXMLHttpRequest Caching Test</a> for available options.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Timer that periodically invokes action. Use to\n stop or resume. Is automatically disposed on disposal of object.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.event.Timer"}, "type": "entry"}]}]}]}, {"attributes": {"name": "refresh"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "action"}, "type": "param", "children": [{"attributes": {"text": "<p>Action to refresh.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Resend request associated to action.</p>\n\n<p>Replays parameters given when action was invoked originally.</p>"}, "type": "desc"}]}]}]}